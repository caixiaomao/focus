// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// CategoryDao is the manager for logic model data accessing and custom defined data operations functions management.
type CategoryDao struct {
	gmvc.M                 // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      categoryColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB          // DB is the raw underlying database management object.
	Table  string          // Table is the underlying table name of the DAO.
}

// CategoryColumns defines and stores column names for table gf_category.
type categoryColumns struct {
	Id          string // 分类ID，自增主键
	ContentType string // 内容类型：topic, ask, article, reply
	Key         string // 栏目唯一键名，用于程序部分场景硬编码，一般不会用得到
	ParentId    string // 父级分类ID，用于层级管理
	UserId      string // 创建的用户ID
	Name        string // 分类名称
	Sort        string // 排序，数值越低越靠前，默认为添加时的时间戳，可用于置顶
	Thumb       string // 封面图
	Brief       string // 简述
	Content     string // 详细介绍
	CreatedAt   string // 创建时间
	UpdatedAt   string // 修改时间
}

// NewCategoryDao creates and returns a new DAO object for table data access.
func NewCategoryDao() *CategoryDao {
	columns := categoryColumns{
		Id:          "id",
		ContentType: "content_type",
		Key:         "key",
		ParentId:    "parent_id",
		UserId:      "user_id",
		Name:        "name",
		Sort:        "sort",
		Thumb:       "thumb",
		Brief:       "brief",
		Content:     "content",
		CreatedAt:   "created_at",
		UpdatedAt:   "updated_at",
	}
	return &CategoryDao{
		C:     columns,
		M:     g.DB("default").Model("gf_category").Safe(),
		DB:    g.DB("default"),
		Table: "gf_category",
	}
}
