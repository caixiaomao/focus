// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// ReplyDao is the manager for logic model data accessing and custom defined data operations functions management.
type ReplyDao struct {
	gmvc.M              // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      replyColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB       // DB is the raw underlying database management object.
	Table  string       // Table is the underlying table name of the DAO.
}

// ReplyColumns defines and stores column names for table gf_reply.
type replyColumns struct {
	Id         string // 回复ID
	ParentId   string // 回复对应的上一级回复ID(没有的话默认为0)
	Title      string // 回复标题
	Content    string // 回复内容
	TargetType string // 评论类型: content, reply
	TargetId   string // 对应内容ID，可能回复的是另一个回复，所以这里没有使用content_id
	UserId     string // 网站用户ID
	ZanCount   string // 赞
	CaiCount   string // 踩
	CreatedAt  string // 创建时间
	UpdatedAt  string //
}

// NewReplyDao creates and returns a new DAO object for table data access.
func NewReplyDao() *ReplyDao {
	columns := replyColumns{
		Id:         "id",
		ParentId:   "parent_id",
		Title:      "title",
		Content:    "content",
		TargetType: "target_type",
		TargetId:   "target_id",
		UserId:     "user_id",
		ZanCount:   "zan_count",
		CaiCount:   "cai_count",
		CreatedAt:  "created_at",
		UpdatedAt:  "updated_at",
	}
	return &ReplyDao{
		C:     columns,
		M:     g.DB("default").Model("gf_reply").Safe(),
		DB:    g.DB("default"),
		Table: "gf_reply",
	}
}
