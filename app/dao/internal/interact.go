// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// InteractDao is the manager for logic model data accessing and custom defined data operations functions management.
type InteractDao struct {
	gmvc.M                 // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      interactColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB          // DB is the raw underlying database management object.
	Table  string          // Table is the underlying table name of the DAO.
}

// InteractColumns defines and stores column names for table gf_interact.
type interactColumns struct {
	Id         string // 自增ID
	Type       string // 操作类型。0:赞，1:踩。
	UserId     string // 操作用户
	TargetId   string // 对应内容ID，该内容可能是content, reply
	TargetType string // 内容模型: content, reply, 具体由程序定义
	Count      string // 操作数据值
	CreatedAt  string //
	UpdatedAt  string //
}

// NewInteractDao creates and returns a new DAO object for table data access.
func NewInteractDao() *InteractDao {
	columns := interactColumns{
		Id:         "id",
		Type:       "type",
		UserId:     "user_id",
		TargetId:   "target_id",
		TargetType: "target_type",
		Count:      "count",
		CreatedAt:  "created_at",
		UpdatedAt:  "updated_at",
	}
	return &InteractDao{
		C:     columns,
		M:     g.DB("default").Model("gf_interact").Safe(),
		DB:    g.DB("default"),
		Table: "gf_interact",
	}
}
